{"version":3,"sources":["webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./node_modules/lodash/_baseSlice.js","webpack:///./node_modules/lodash/deburr.js","webpack:///./node_modules/lodash/_arrayReduce.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./node_modules/lodash/_asciiWords.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/_hasUnicodeWord.js","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./node_modules/lodash/_hasUnicode.js","webpack:///./node_modules/lodash/_createCompounder.js","webpack:///./node_modules/lodash/camelCase.js","webpack:///./node_modules/lodash/_castSlice.js","webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/capitalize.js","webpack:///./node_modules/lodash/words.js","webpack:///./node_modules/lodash/_unicodeWords.js"],"names":["asciiToArray","__webpack_require__","hasUnicode","unicodeToArray","stringToArray","string","module","exports","baseSlice","array","start","end","index","length","result","Array","identity","value","arrayReduce","iteratee","accumulator","initAccum","split","reAsciiWord","asciiWords","match","reHasUnicodeWord","hasUnicodeWord","test","createCaseFirst","upperFirst","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","deburr","words","rsApos","reApos","createCompounder","callback","replace","capitalize","camelCase","word","toLowerCase","castSlice","undefined","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsOptJoin","join","rsSeq","rsSymbol","reUnicode","toString","methodName","strSymbols","chr","charAt","trailing","slice","unicodeWords","pattern","guard","rsDingbatRange","rsLowerRange","rsMathOpRange","rsNonCharRange","rsPunctuationRange","rsSpaceRange","rsUpperRange","rsBreakRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsUpper","rsMiscLower","rsMiscUpper","rsOptContrLower","rsOptContrUpper","rsOrdLower","rsOrdUpper","rsEmoji","reUnicodeWord"],"mappings":"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","file":"js/chunk-vendors~2930ad93.d1ae3f4c.js","sourcesContent":["var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n","var capitalize = require('./capitalize'),\n    createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function(result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\nmodule.exports = camelCase;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n"],"sourceRoot":""}